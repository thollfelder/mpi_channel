#!/bin/tcsh
#PBS -l nodes=1:ppn=2:p4,walltime=49:30:00
#PBS -q default
#PBS -j oe
#PBS -m abe
#PBS -M bt702141@uni-bayreuth.de
#PBS -N Job_008
#PBS -p 500

#-------------------------------------------------------------------------------
# Set environment if necessary (mpirun, MPI and MKL libraries)
# Check Aviable Modules: $>module avial
module load mpi/gcc/mpich/3.3.2_gcc6.5 #[Possible]
module load apps/cmake/3.6.0
module load gcc/7.3.0
# module load gcc/10.1.0 #[NEIN - unable to load]
# module load make/4.2.1 #[NEIN - uunable to load]
#[MORE_MODULES]

#-------------------------------------------------------------------------------
# Set your program
# set PROG = HELLO_WORLD

#-------------------------------------------------------------------------------
# Unlimit
unlimit
limit coredumpsize 0

#-------------------------------------------------------------------------------
# Output and go to working directory
echo
date
echo
echo -n 'Job id: '
echo $PBS_JOBID
echo
echo -n 'Working_Directory: '
echo $PBS_O_WORKDIR
cd $PBS_O_WORKDIR
echo
echo -n 'mpirun version: '
$MPI_RUN -version

# /linuxpoolhome/nuss/41/bt702141/Bachelor/bachlor_code/ClusterWork/Bachelor_tests/btrxz3/JOBS/Job_001
set LIB_ROOT = /linuxpoolhome/nuss/41/bt702141/Bachelor/bachlor_code
set JOBS = /linuxpoolhome/nuss/41/bt702141/Bachelor/bachlor_code/ClusterWork/Bachelor_tests/btrxz3/JOBS
set DIR_OUTPUT = output
set JOB_SPEC = "_001"
set now=`date +%d_%m_%Y`
echo $now

#-------------------------------------------------------------------------------
# Get the hostfile
cd $JOBS 
if (! -d "$PBS_JOBNAME") then
	mkdir $PBS_JOBNAME
else 
	echo "($PBS_JOBNAME) Directory found"
endif
cd $PBS_JOBNAME

if (! -d "$PBS_JOBID") then
	mkdir $PBS_JOBID
else 
	echo "($PBS_JOBID) Directory found"
endif
cd $PBS_JOBID

if (! -d "$DIR_OUTPUT") then
	mkdir $DIR_OUTPUT
	echo "($DIR_OUTPUT) Directory creating..."
else 
	echo "($DIR_OUTPUT) Directory found"
endif

cd $JOBS/$PBS_JOBNAME
if  (-f "mpd${JOB_SPEC}.hosts") then
	echo "Delete mpd${JOB_SPEC}.hosts!"
	rm "mpd${JOB_SPEC}.hosts"
endif

if  (! -d "timetable") then
	mkdir "timetable"
endif

cd "$JOBS/$PBS_JOBNAME/timetable"
if  (! -d "PMD") then
	mkdir "PMD"
endif

#-------------------------------------------------------------------------------
# Drop every second proc. socket (Hyperthreading) and save proc. list in mpd.hosts
awk "{if(NR %2 ==0) print $1 ;}" $PBS_NODEFILE > $JOBS/$PBS_JOBNAME/"mpd${JOB_SPEC}".hosts

#-------------------------------------------------------------------------------
# Extract the number of hosts from the hostfile
set hostlist = (`cat $JOBS/$PBS_JOBNAME/mpd${JOB_SPEC}.hosts`)
set nodes = $#hostlist

#-------------------------------------------------------------------------------
# Clear memory on the compute nodes
/cluster/bayreuth/iws/bin/memsweeper "$JOBS/$PBS_JOBNAME/mpd${JOB_SPEC}.hosts"
# /cluster/bayreuth/iws/bin/drop_buffers mpd.hosts 

#-------------------------------------------------------------------------------
#Output
echo "Job: ${PBS_JOBNAME}${JOB_SPEC}"
echo -n 'Number of MPI processes: '
echo $nodes
echo -n 'Hostlist: '
echo $hostlist
echo
echo 'Start the job!'

#-------------------------------------------------------------------------------
#Execute
cd $LIB_ROOT
echo "Changed Dir to root: $LIB_ROOT"

# echo "export SOLVE_TABLE='Y0 YN YMIN YMAX IMPL KERNEL N BF METHOD H NT NP ODE SOLVER'" #[Das funktioniert nicht]
# bash -c "export SOLVE_TABLE='Y0 YN YMIN YMAX IMPL KERNEL N BF METHOD H NT NP ODE SOLVER'; echo \$SOLVE_TABLE" #[ERROR: "SOLVE_TABLE: Undefined variable."]
# bash -c "export SOLVE_TABLE='Y0 YN YMIN YMAX IMPL KERNEL N BF METHOD H NT NP ODE SOLVER'" #[Schmeist keinen Fehler, aber die Tabelle ist nicht so formatiert]
# setenv SOLVE_TABLE='Y0 YN YMIN YMAX IMPL KERNEL N BF METHOD H NT NP ODE SOLVER' #[setenv: Variable name must contain alphanumeric characters.]
# env SOLVE_TABLE='Y0 YN YMIN YMAX IMPL KERNEL N BF METHOD H NT NP ODE SOLVER'


setenv SOLVE_TABLE "Y0 YN YMIN YMAX IMPL KERNEL N BF METHOD H T0 STEPS NT NP ODE SOLVER BLOCKSIZE"
make >& $JOBS/$PBS_JOBNAME/$PBS_JOBID/$DIR_OUTPUT/make.out
echo "make finished"

foreach IMPL (impl_001 impl_002 impl_003 impl_005 impl_007 impl_008)
	set LOOP_W1 = 1 #ANZAHL PROZESSE
	
	#N bei BRUSS2D-MIX -> 2xN² = 131072 (n=256)
	#N bei HEAT2D-Case -> N² = 131044 (n=362)
	set LOOP_W2 = 362 #N
	set LOOP_W3 = 8 #BLOCKSIZE
	set k = 1

	while ($LOOP_W3 <= 128) 
		foreach TABLE ("AB1" "AB4" "AB6" "RK1" "RK4" "RKMix" "Preditor-corector_based_Randau_IA(3)")
		# "Preditor-corector_based_Randau_IA(3)"
			if (! -d "$JOBS/$PBS_JOBNAME/$PBS_JOBID/$DIR_OUTPUT/$TABLE") then
				mkdir $JOBS/$PBS_JOBNAME/$PBS_JOBID/$DIR_OUTPUT/$TABLE
				echo "Directory $TABLE creating... ($JOBS/$PBS_JOBNAME/$PBS_JOBID/$DIR_OUTPUT/$TABLE)"
			endif

			if (! -d "$JOBS/$PBS_JOBNAME/timetable/PMD/$TABLE") then
				mkdir "$JOBS/$PBS_JOBNAME/timetable/PMD/$TABLE"
				echo "Directory $TABLE creating... ($JOBS/$PBS_JOBNAME/timetable/PMD/$TABLE)"
			endif

			if (! -d "$JOBS/$PBS_JOBNAME/timetable/PMD/$TABLE/JOB") then
				mkdir "$JOBS/$PBS_JOBNAME/timetable/PMD/$TABLE/JOB"
			endif

			echo "Running $TABLE with N=$LOOP_W2 BS=$LOOP_W3 impl=$IMPL"

			$MPI_RUN -hostfile "$JOBS/$PBS_JOBNAME/mpd${JOB_SPEC}.hosts" -np $LOOP_W1 ./bin/solve -solver:dmGLM -impl:$IMPL -ode:HEAT2D-CASE -N:$LOOP_W2 -method:$TABLE -bs:$LOOP_W3 -h:1e-10 -H:1e-8 -t0:0 -time -table:"$JOBS/$PBS_JOBNAME/timetable/PMD/$TABLE/JOB/${PBS_JOBNAME}${JOB_SPEC}_${now}_timetable.pmd" >& $JOBS/$PBS_JOBNAME/$PBS_JOBID/$DIR_OUTPUT/$TABLE/SolveOutput.$IMPL.out

			# -solpath:$JOBS/$PBS_JOBNAME/$PBS_JOBID/$DIR_OUTPUT/$TABLE/Solvefile.$IMPL.out

			# if ($TABLE == "AB1") then
			# 	@ k = 2
			# endif

			# if ($TABLE == "AB2") then
			# 	@ k = 3
			# endif

			# if ($TABLE == "AB3") then
			# 	@ k = 4
			# endif

			# if ($TABLE == "AB4") then
			# 	@ k = 5
			# endif

			# if ($TABLE == "AB5") then
			# 	@ k = 6
			# endif

			# if ($TABLE == "AB6") then
			# 	@ k = 7
			# endif

			# if ($TABLE == "RK1" ) then
			# 	@ k = 1
			# endif

			# if ($TABLE == "RK4") then
			# 	@ k = 1
			# endif

			# if ($TABLE == "Preditor-corector_based_Randau_IA(3)") then
			# 	@ k = 1
			# endif

			# if ($TABLE == "RKMIX") then
			# 	@ k = 2
			# endif

			# ./bin/GLM_startproc_AB -h:1e-10 -k:$k -ode:HEAT2D-CASE -output:$TABLE -N:$LOOP_W2  

			# ./bin/solve -ode:HEAT2D-CASE -H:1e-8 -N:$LOOP_W2 -h:1e-10 -solver:seqGLM -impl:test21 -method:$TABLE -bs:$LOOP_W3 -time -table:"$JOBS/$PBS_JOBNAME/timetable/PMD/$TABLE/JOB/${PBS_JOBNAME}${JOB_SPEC}_${now}_timetable.pmd" >& $JOBS/$PBS_JOBNAME/$PBS_JOBID/$DIR_OUTPUT/$TABLE/SolveOutput.test21.out

			# if ($LOOP_W1 <= $LOOP_W2) then
			# 	echo "Running $TABLE with N=$LOOP_W2 impl=$IMPL"
			# 	$MPI_RUN -hostfile $JOBS/$PBS_JOBNAME/mpd.hosts -np $LOOP_W1 ./bin/solve -solver:dmGLM -impl:$IMPL -ode:HEAT2D-CASE -N:$LOOP_W2 -butchertable:$TABLE -h:1e-10 -H:1e-8 -t0:0 -time -table:$JOBS/$PBS_JOBNAME/$PBS_JOBID/$DIR_OUTPUT/$TABLE/timetable.pmd >& $JOBS/$PBS_JOBNAME/$PBS_JOBID/$DIR_OUTPUT/$TABLE/SolveOutput.$IMPL.$LOOP_W1.$LOOP_W2.out
			# endif
			
		end

		@ LOOP_W3 = $LOOP_W3 + 8
	end
	unset LOOP_W3
	unset LOOP_W2
	unset LOOP_W1
	unset k

end




#-------------------------------------------------------------------------------
#Output and clean up
echo 'Job ended!'
unset $LIB_ROOT
unset $JOBS
unset $DIR_OUTPUT
unset $hostlist
unset $nodes
unset $now
# unset $z
echo
date
exit